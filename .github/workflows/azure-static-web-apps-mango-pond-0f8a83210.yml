name: Azure Static Web Apps CI/CD - Optimized

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    permissions:
       id-token: write
       contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client
        
      - name: Get Id Token
        uses: actions/github-script@v6
        id: idtoken
        with:
           script: |
               const coredemo = require('@actions/core')
               return await coredemo.getIDToken()
           result-encoding: string
           
      # Clean up before deployment to reduce file count
      - name: Clean and Optimize Frontend
        run: |
          echo "=== Cleaning Frontend for deployment ==="
          cd Frontend
          
          # Remove unnecessary files that might be included
          echo "Removing development files..."
          rm -rf node_modules/ || echo "No node_modules to remove"
          rm -rf .git/ || echo "No .git to remove"
          rm -rf coverage/ || echo "No coverage to remove"
          rm -rf .nyc_output/ || echo "No .nyc_output to remove"
          rm -rf cypress/ || echo "No cypress to remove"
          rm -rf tests/ || echo "No tests to remove"
          rm -rf test/ || echo "No test to remove"
          rm -rf __tests__/ || echo "No __tests__ to remove"
          
          # Remove common development files
          rm -f .env.local || echo "No .env.local"
          rm -f .env.development || echo "No .env.development"
          rm -f package-lock.json || echo "No package-lock.json"
          rm -f yarn.lock || echo "No yarn.lock"
          rm -f .gitignore || echo "No .gitignore"
          rm -f README.md || echo "No README.md"
          rm -f *.log || echo "No log files"
          
          # Remove common IDE/editor files
          rm -rf .vscode/ || echo "No .vscode"
          rm -rf .idea/ || echo "No .idea"
          rm -f .DS_Store || echo "No .DS_Store"
          
          echo "Files remaining after cleanup:"
          find . -type f | wc -l
          echo "Directory structure after cleanup:"
          ls -la
          
      # Create a minimal deployment package
      - name: Create Minimal Deployment Package
        run: |
          echo "=== Creating minimal deployment package ==="
          mkdir -p deploy-package
          cd Frontend
          
          # Copy only essential files
          if [ -f "index.html" ]; then
            echo "Copying index.html"
            cp index.html ../deploy-package/
          fi
          
          # Copy built assets if they exist
          if [ -d "build" ]; then
            echo "Copying build directory"
            cp -r build/* ../deploy-package/ 2>/dev/null || echo "Failed to copy build contents"
          elif [ -d "dist" ]; then
            echo "Copying dist directory"
            cp -r dist/* ../deploy-package/ 2>/dev/null || echo "Failed to copy dist contents"
          elif [ -d "public" ]; then
            echo "Copying public directory"
            cp -r public/* ../deploy-package/ 2>/dev/null || echo "Failed to copy public contents"
          else
            # Copy common web files
            echo "Copying common web files"
            find . -maxdepth 2 -name "*.html" -exec cp {} ../deploy-package/ \; 2>/dev/null || echo "No HTML files found"
            find . -maxdepth 2 -name "*.css" -exec cp {} ../deploy-package/ \; 2>/dev/null || echo "No CSS files found"
            find . -maxdepth 2 -name "*.js" -exec cp {} ../deploy-package/ \; 2>/dev/null || echo "No JS files found"
            
            # Copy src files if no build directory exists
            if [ -d "src" ]; then
              cp -r src ../deploy-package/ 2>/dev/null || echo "Failed to copy src"
            fi
          fi
          
          cd ..
          echo "Deployment package contents:"
          ls -la deploy-package/
          echo "Total files in deployment package:"
          find deploy-package -type f | wc -l
          
      - name: Build And Deploy - Optimized
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_MANGO_POND_0F8A83210 }}
          action: "upload"
          ###### Repository/Build Configurations ######
          app_location: "./deploy-package" # Use our cleaned deployment package
          api_location: "" # No API for now
          output_location: "" # Files are already in the app_location
          skip_build: true # Skip build since we've already prepared the files
          github_id_token: ${{ steps.idtoken.outputs.result }}
          ###### End of Repository/Build Configurations ######
          
  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_MANGO_POND_0F8A83210 }}
          action: "close"
